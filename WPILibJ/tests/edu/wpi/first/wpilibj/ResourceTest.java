/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package edu.wpi.first.wpilibj;

import edu.wpi.first.testing.TestClass;

import edu.wpi.first.wpilibj.util.AllocationException;
import java.util.Vector;

/**
 * @file ExceptionTest.java
 * Tests the analog channel class using potentiometer and servo
 * @author Ryan O'Meara
 */
public class ResourceTest extends TestClass implements TestHarness
{
    private DigitalInput in = null;

    public String getName()
    {
        return "Resource Test";
    }

    public void setup()
    {
    }

    public void teardown()
    {
        if (in != null)
            in.free();
    }


    {
        new Test("Allocation")
        {

            public void run()
            {
                //Test the allocation exception
                try
                {
                    in = new DigitalInput(CROSSCONNECTAP1);
                } catch (AllocationException e){
                    assertFail("exception on first allocation");
                }

                try
                {
                    new DigitalInput(CROSSCONNECTAP1);
                    assertFail("second allocation did not throw exception");
                } catch (AllocationException e)
                {
                }
            }
        };

        new Test("Free Twice"){
            Counter doublefree;

            public void teardown(){
                try{
                    doublefree.free();
                }catch(Exception e){}
            }

            public void run(){
                doublefree = new Counter();
                doublefree.free();

                try{
                    doublefree.free();
                    assertFail("Double freeing threw no exception");
                }catch(Exception e){}
            }
        };

        new Test("Freeing and reallocating"){
            Counter realloc;

            public void teardown(){
                try{
                    realloc.free();
                }catch(Exception e){}
            }

            public void run(){
                realloc = new Counter();

                realloc.free();

                try{
                    realloc = new Counter();
                }catch(Exception e){assertFail("Reallocation threw exception");}
            }
        };

        new Test("Limited amount of allocations"){
            Vector excp;

            public void run(){
                excp = new Vector();

                try{
                    for (int i = 0; i < 100; i++) {
                        excp.addElement(new Counter());
                    }

                    assertFail("No exception generated by too many counters");
                }catch(Exception e){}

            }

            public void teardown(){
                for(int i =0; i< excp.size(); i++){
                    ((Counter)excp.elementAt(i)).free();
                }
            }
        };

        new Test("Allocation locations"){
            DigitalInput one, two;

            public void run(){
                one = new DigitalInput(1);

                try{
                    two = new DigitalInput(1);
                    two.free();
                    assertFail("Two DigitalInputs on same port did not produce exception");
                }catch(Exception e){}

                one.free();
            }

            public void teardown(){
                try{
                    one.free();
                    two.free();
                }catch(Exception e){}
            }
        };
    }
}
